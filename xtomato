#!/bin/ksh

# Copyright (c) 2013 Todd T. Fries <todd@fries.net>
#
# Permission to use, copy, modify, and distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
#
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

DING="~/tmp/drumhit.wav"
GENBUTTON="ACK"
PAUSEBUTTON="PAUSE"
EXITBUTTON="EXIT"
WORKLIST=~/worklist

# over-ride in conf file if more action needed
_start_break() {
	:
}
_end_break() {
	:
}

tty=`tty`
tty=`basename $tty`
TTY=${TTY:-$tty}
sound=1
soundvol=90
TMPDIR=${TMPDIR:-/tmp}
[ -f $HOME/.xtomato.conf ] && . $HOME/.xtomato.conf

if ! [ -d "$TMPDIR" ]; then
	TMPDIR=/tmp
fi
td=$(mktemp -d "$TMPDIR"/xtomato.XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX)
trap 'rm -rf "$td"' 0 1 2 3 13 15

msg() {
	local sleep="" sleeparg="$1" gb="$2" canpause="$3" pb="" origsleeparg
	if [ sound -eq 1 -a -f ${DING} ]; then
		aucat -v $soundvol -i ${DING}
	fi
	if ! [ "$gb" ]; then
		gb="$GENBUTTON"
	fi
	if [ "$sleeparg" -a "$canpause" -a "$canpause" -eq "1" ]; then
		pb=",$PAUSEBUTTON:2"
		origsleeparg="$sleeparg"
	fi
	
	while :
	do
		local start=$SECONDS dur
		if [ "$sleeparg" ]; then
			sleep=" -timeout $sleeparg "
		fi
		xmcmd="xmessage $sleep -print -center \
		    -buttons $gb:0,$EXITBUTTON:1$pb -default $gb \
		    -file "$td"/msg"
		if ((verbose > 0)); then
			echo "-> $xmcmd"
		fi
		button=$($xmcmd)
		case "$button" in
		$GENBUTTON) return 0;;
		$EXITBUTTON) exit;;
		$PAUSEBUTTON)
			let dur=$SECONDS-$start
			_start_break
			mv "$td"/msg "$td"/msg.save
			{
			  echo -n "${dur}s passed since start, "
			  echo -n "pausing with $((sleeparg-dur))s left out "
			  echo    "of $origsleeparg"
			} > "$td"/msg
			msg "" "Unpause"
			mv "$td"/msg.save "$td"/msg
			_end_break
			# logically this should never trigger, but just incase..
			if [ dur -gt sleeparg ]; then
				return 0
			fi
			let sleeparg=sleeparg-dur
		;;
		*) return 1;;
		esac
	done
}

dobreak() {
	local sleep="$1" project="$2" info="$3" stop
	local projinfo="$project: T-${sleep}s and counting"
	{
		[ "$prevmsg" ] && echo "[$prevmsg]"
		echo "$(date +"%Y%m%d %H:%M:%S") Started"
		echo "$projinfo"
		[ "$info" ] && echo "$info"
	} > "$td"/msg
	let stop=SECONDS+sleep
	msg $sleep DONE 1
	ret=$?
	if ! ((ret < 1)); then
		echo "$projinfo: ${sleep}s done!" > "$td"/msg
		msg
	fi
	prevmsg="$project: lasted $((sleep+SECONDS-stop))s ended $(date +"%Y %H:%M:%S")"
}

filter4re() {
	local re="$1"
	echo "$1" | sed 's/\//\\\//g'
}

set -A projects
set -A info
set -A subprojects
loadworklist() {
	[ -f $WORKLIST ] || return
	if ((verbose > 1)); then
		set -x
	fi
	set -A projects $( awk '
		/^[\/o] /{
			$1 = "";
			sub("^[ ]*","");
			sub(" weight=[0-9]+$","");
			print}' $WORKLIST)
	set -A weights $( awk '
		/^[\/o] .* weight=[0-9]+$/{
			$1 = "";
			sub("^.* weight=","");
			print;
			next}
		/^[\/o] /{
			print "0"} ' $WORKLIST)
	set -A weightsecs
	set -A info
	set -A subprojects
	set -A subrangestart
	set -A subrangestop
	set -A subcurrent
	set -A subinfo
	local i=0
	while [ i -lt ${#projects[*]} ]
	do
		project=${projects[i]}
		awk '
			BEGIN {start=0}
			/^[\/o] '"$project"'( weight=[0-9]*$|$)/ {start=1;next}
			/^[\/o] /{start=0}
			/^ [\/o] /{if (start == 1) {sub("^[ ]*",""); print; next}}
		' $WORKLIST > "$td"/subprojects
		local j=0 totsub=$(($(wc -l < "$td"/subprojects) + 0)) k=0 rstart=${#subprojects[*]} rstop
		while [ j -lt $totsub ]
		do
			((j++))
			subprojects[${#subprojects[*]}]=$(head -$j "$td"/subprojects | tail -1)
		done
		rstop=${#subprojects[*]}
		subrangestart[i]=$rstart
		subrangestop[i]=$rstop
		subcurrent[i]=0
		if [ weights[i] > 0 ]; then
			weightinfo=", weight ${weights[i]}"
		else
			weightinfo=""
		fi
		echo "Loaded project $project with $((rstop-rstart)) subprojects$weightinfo"
		info[i]=$(awk 'BEGIN {start=0}
			/^[\/o] '"$project"'( weight=[0-9]*$|$)/ {start=1;next}
			/^[\/o] /{start=0;next}
			{if(start == 1) {sub("^ ","");print}}'\
		    $WORKLIST)
		j=$rstart
		k=1
		while [ j -lt rstop ]
		do
			if ((verbose > 0)); then
				printf "%02d. %s\n" $k "${subprojects[j]}"
			fi
			subtmp=${subprojects[j]}
			subtmp=${subtmp#[/o] *}
			subinfo[j]=$(awk '
				BEGIN {start=0;substart=0}
				/^[\/o] '"$(filter4re "$project")"'( weight=[0-9]*$|$)/ {start=1;next}
				/^ [\/o] '"$(filter4re "$subtmp")"'$/ {substart=1;next}
				/^[\/o] /{start=0;next}
				/^ [\/o] /{substart=0;next}
				{ if (start == 1 && substart == 1) {sub("^ ",""); print}}' $WORKLIST)
			((k++))
			((j++))
		done
		((i++))
	done
}

HACK=$((5 * 60))
TOTALHACK=0
verbose=0
bezerk=0
while [ "$1" ]
do
	case "$1" in
	-b)	# bezerk mode (aka no breaks)
		((bezerk++));shift
	;;
	-c)	# config file
		[ -f "$2" ] && . $2 || exit 1 ; shift; shift
	;;
	-t)	# one work slot timing
		shift;HACK="$1";shift
	;;
	-T)	# total estimated time to divide amongst worklist projects
		shift;TOTALHACK="$1";shift
	;;
	-v)	# verbosity
		((verbose++));shift
	;;
	-w)	# worklist
		[ -f "$2" ] && WORKLIST="$2" || exit 1; shift; shift
	;;
	*) break;;
	esac
done
loadworklist

totalweight=0
totalweightcount=0
if (( ${#projects[*]} > 0 )); then
	if (( TOTALHACK > 0 )); then
		echo "Project time (sbreak): $(( HACK + SBREAK ))s"
		echo "Project time (lbreak): $(( HACK + LBREAK ))s"
		echo "With ${#projects[*]} projects + sbreaktime = $(( ${#projects[*]} * (HACK + SBREAK) ))s"
		echo "Total hack time allocated = $TOTALHACK"
		echo "Guessing HACK + SBREAK = TOTALHACK / (proj + sbreak) = $(( TOTALHACK / ${#projects[*]} ))"
		echo "Guessing HACK = $(( TOTALHACK / ${#projects[*]} - SBREAK ))"
		HACK=$(( TOTALHACK / ${#projects[*]} - SBREAK ))
	fi
	i=0
	while (( i < ${#weights[*]} ))
	do
		if (( weights[i] > 0 )); then
			((totalweightcount++))
			let totalweight=totalweight+weights[i]
		fi
		((i++))
	done
	if (( totalweight < 1 )); then
		echo "totalweight = $totalweight"
		exit 1
	fi
	i=0
	while (( i < ${#weights[*]} ))
	do
		if (( weights[i] > 0 )); then
			weightsecs[i]=$( {
			        echo scale=5
			        echo "($HACK * ${#projects[*]} * ${weights[i]} ) / $totalweight"
			    } | bc)
		else
			weightsecs[i]=$HACK
		fi
		((i++))
	done
	
fi
if ((bezerk > 0)); then
	SBREAK=0
	LBREAK=0
else
	SBREAK=$((HACK/10))
	LBREAK=$HACK
fi

echo "Start the cycle ?" > "$td"/msg
echo "HACK=$HACK SBREAK=$SBREAK LBREAK=$LBREAK)" >> "$td"/msg
msg "" "START"

prevmsg=""
currentproject=-1
while true; do
	scounter=1

	while (( scounter < 5 )); do
		((currentproject++))
		if ((currentproject >= ${#projects[*]})); then
			currentproject=0
		fi
		rstart=${subrangestart[currentproject]}
		rstop=${subrangestop[currentproject]}
		if ((rstart < rstop)); then
			let subcur=rstart+${subcurrent[currentproject]}
			let subcurrent[currentproject]=${subcurrent[currentproject]}+1
			if ((${subcurrent[currentproject]} > (rstop - rstart) )); then
				let subcurrent[currentproject]=rstart
				let subcur=rstart
			fi
			info=$(printf "%s\n%s" "${subprojects[subcur]}" "${subinfo[subcur]}")
			if ! [ "$info" ]; then
				info="rstart=$rstart rstop=$rstop subcur=$subcur"
				info="$info\ncurrentproject=$currentproject ${weightinfo}subcurrent[currentproject]=${subcurrent[currentproject]}"
				info="$info\nsubcur=$subcur subprojects[subcir]=${subprojects[subcur]}"
			fi
		else
			info="rstart=$rstart rstop=$rstop"
		fi
		if [ weights[currentproject] > 0 ]; then
			weightinfo=" weight=${weights[currentproject]} weightsecs=${weightsecs[currentproject]}"
			thishack=${weightsecs[currentproject]}
			# round, is there a ksh way?
			thishack=$(perl -e "printf \"%d\n\",$thishack + 0.5;")
			# minimum is 1s
			if [ thishack -eq 0 ]; then
				thishack=1
			fi
		else
			weightinfo=""
			thishack=$HACK
		fi
		_end_break
		dobreak $thishack "Work(${projects[currentproject]}$weightinfo)" "$info"
		_start_break

		[ scounter -lt 4 ] && dobreak ${SBREAK} \
		    "Record time, drink, check {email, IM, etc.} short break"

		((scounter++))
	done
	dobreak ${LBREAK} "Take a long break, hike!"
	# this clears current subproject statuses, not useful unless some way is found to keep them intact
	# across reloads
	#loadworklist
done
